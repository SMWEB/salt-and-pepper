h1. Salt and Pepper

Provides automatic password hashing for ActiveRecord (>= 3.0) and a couple of methods for generating random strings, tokens, etc.
Features:

* Mark columns for auto-hashing with a single line of code.
* Automatic salting of hashes. No separate column is required for the salt.
* Does not break validations on the hashed columns (only a small change is required).
* Super easy hash verification.
* Tested using RSpec 2

<code>Digest::SHA256</code> is used for hashing and <code>ActiveRecord::SecureRandom</code> is used for generating random stuff.

h2. Installation

Just add it to your Gemfile and run <code>bundle install</code>

<pre>
gem "salt-and-pepper"
</pre>

h2. Usage

To enable automatic hashing for a column, call <code>hash_column</code> in your model:

<pre>
class User < ActiveRecord::Base
  hash_column :password
end
</pre>

You can specify multiple columns in one line or in separate lines:

<pre>
class User < ActiveRecord::Base
  hash_column :password, :security_token

  # or
  hash_column :password
  hash_column :security_token
end
</pre>

h3. Options

You can pass the <code>:length</code> option to change the length of the stored hash.
Numbers between 96 and 192 are accepted, the default value is 128. Make sure the database column can store a string that long!

<pre>
# set length for both columns
hash_column :password, :security_token, :length => 100

# or adjust them individually
hash_column :password, :length => 160
hash_column :secret, :length => 120
</pre>

By default, blank _(= empty or whitespace-only)_ strings will be converted to <code>nil</code>, and will not be hashed.
If you _really_ want blank strings to be hashed, use the <code>:hash_blank_strings</code> option:

<pre>
# Default behavior:
#                    nil => nil
#           empty string => nil
# whitespace-only string => nil

hash_column :password, :hash_blank_strings => true

# New behavior:
#                    nil => nil
#           empty string => 77c0a93ad8e5f42cf676...
# whitespace-only string => 1b8d091174299844b1a4...
</pre>

h3. Verification

Just compare the two values:

<pre>
if @user.password == "secret"
  # password is valid
end
</pre>

A full example:

<pre>
# app/models/user.rb
class User < ActiveRecord::Base
  hash_column :password
end

# app/controllers/sessions_controller.rb
def create
  @user = User.find_by_username(params[:username])
  if @user.present? && @user.password == params[:password]
    # login user here
  else
    redirect_to new_session_path, :alert => "Invalid username or password."
  end
end
</pre>

h3. Validating hashed columns

Salt and Pepper provides the <code>validate_[column]?</code> method for deciding whether validations on the column should be performed.
Use it to prevent running your sophisticated length-checking algorithms on a 128-character hash :). Skipping validation of hashed values is safe because they were already checked at the time they were set.

<pre>
class User < ActiveRecord::Base
  encrypt :password
  validates :password, :length => { :within => 6..100 }, :if => :validate_password?
end
</pre>

h3. Generating random stuff

Salt and Pepper has a couple of handy methods for generating random numbers, codes, tokens, etc:

<pre>
SaltPepper.random_number(6)                           # => 4     (identical to: 0..5)
SaltPepper.random_number(10..20)                      # => 11
SaltPepper.alpha_code                                 # => "SNPBJSDG"
SaltPepper.alpha_code(4)                              # => "FKNP"
SaltPepper.numeric_code                               # => "01570475"
SaltPepper.numeric_code(20)                           # => "70110124996934848762"
SaltPepper.code                                       # => "29Y3WSEC"     (alphanumeric)
SaltPepper.code(5)                                    # => "89U1F"
SaltPepper.code(10, 'a'..'z')                         # => "mqxeozlelw"
SaltPepper.code(15, (0..1).to_a + ('a'..'b').to_a)    # => "0ab1b0b1b01a0a1"
SaltPepper.token                                      # => "a0d5828f79e9e22dbc1f896e49f8183a"
SaltPepper.token(16)                                  # => "caa4a085edb19499"
</pre>

h2. License

Released under the MIT license.
Copyright (C) Máté Solymosi 2011
